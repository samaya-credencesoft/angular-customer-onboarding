"use strict";
/*
 * Copyright (c) 2017, Okta, Inc. and/or its affiliates. All rights reserved.
 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * See the License for the specific language governing permissions and limitations under the License.
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var okta_config_1 = require("./okta.config");
/**
 * Import the okta-auth-js library
 */
var OktaAuth = require("@okta/okta-auth-js");
var OktaAuthService = /** @class */ (function () {
    function OktaAuthService(auth, router) {
        this.auth = auth;
        this.router = router;
        var missing = [];
        if (!auth.issuer) {
            missing.push('issuer');
        }
        if (!auth.clientId) {
            missing.push('clientId');
        }
        if (!auth.redirectUri) {
            missing.push('redirectUri');
        }
        if (missing.length) {
            throw new Error(missing.join(', ') + " must be defined");
        }
        this.oktaAuth = new OktaAuth({
            url: auth.issuer.split('/oauth2/')[0],
            clientId: auth.clientId,
            issuer: auth.issuer,
            redirectUri: auth.redirectUri
        });
        /**
         * Scrub scopes to ensure 'openid' is included
         */
        auth.scope = this.scrubScopes(auth.scope);
        /**
         * Cache the auth config.
         */
        this.config = auth;
    }
    /**
     * Returns the OktaAuth object to handle flows outside of this lib.
     */
    OktaAuthService.prototype.getOktaAuth = function () {
        return this.oktaAuth;
    };
    /**
     * Checks if there is a current accessToken in the TokenManager.
     */
    OktaAuthService.prototype.isAuthenticated = function () {
        return !!this.oktaAuth.tokenManager.get('accessToken');
    };
    /**
     * Returns the current accessToken in the tokenManager.
     */
    OktaAuthService.prototype.getAccessToken = function () {
        return this.oktaAuth.tokenManager.get('accessToken');
    };
    /**
     * Returns the current idToken in the tokenManager.
     */
    OktaAuthService.prototype.getIdToken = function () {
        return this.oktaAuth.tokenManager.get('idToken');
    };
    /**
     * Returns the configuration object used.
     */
    OktaAuthService.prototype.getOktaConfig = function () {
        return this.config;
    };
    /**
     * Launches the login redirect.
     */
    OktaAuthService.prototype.loginRedirect = function (additionalParams) {
        this.oktaAuth.token.getWithRedirect(__assign({ responseType: ['id_token', 'token'], 
            // Convert scopes to list of strings
            scopes: this.config.scope.split(' ') }, additionalParams));
    };
    /**
     * Stores the intended path to redirect after successful login.
     * @param uri
     */
    OktaAuthService.prototype.setFromUri = function (uri) {
        localStorage.setItem('referrerPath', uri);
    };
    /**
     * Returns the referrer path from localStorage or app root.
     */
    OktaAuthService.prototype.getFromUri = function () {
        var path = localStorage.getItem('referrerPath') || '/';
        localStorage.removeItem('referrerPath');
        return path;
    };
    /**
     * Parses the tokens from the callback URL.
     */
    OktaAuthService.prototype.handleAuthentication = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.oktaAuth.token.parseFromUrl()];
                    case 1:
                        tokens = _a.sent();
                        tokens.forEach(function (token) {
                            if (token.idToken) {
                                _this.oktaAuth.tokenManager.add('idToken', token);
                            }
                            if (token.accessToken) {
                                _this.oktaAuth.tokenManager.add('accessToken', token);
                            }
                        });
                        /**
                         * Navigate back to the initial view or root of application.
                         */
                        this.router.navigate([this.getFromUri()]);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Clears the user session in Okta and removes
     * tokens stored in the tokenManager.
     */
    OktaAuthService.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.oktaAuth.tokenManager.clear();
                        return [4 /*yield*/, this.oktaAuth.signOut()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Scrub scopes to ensure 'openid' is included
     */
    OktaAuthService.prototype.scrubScopes = function (scopes) {
        if (!scopes) {
            return 'openid email';
        }
        else {
            // Make sure object is a string
            scopes = Array.isArray(scopes) ? scopes.join(' ') : scopes;
        }
        if (scopes.indexOf('openid') === -1) {
            return scopes + ' openid';
        }
        return scopes;
    };
    OktaAuthService.decorators = [
        { type: core_1.Injectable },
    ];
    /** @nocollapse */
    OktaAuthService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core_1.Inject, args: [okta_config_1.OKTA_CONFIG,] },] },
        { type: router_1.Router, },
    ]; };
    return OktaAuthService;
}());
exports.OktaAuthService = OktaAuthService;
//# sourceMappingURL=okta.service.js.map